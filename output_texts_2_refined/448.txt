On Monday this week, the big cybersecurity news was speculative.
Was there a big, bad security bug in Microsoft Windows waiting to be announced the next day?
On Tuesday, the big news was the announcement that everyone had been guessing about.
Yes, there was a big bad bug, and it was in the Windows CryptoAPI.
It wasn‚Äôt a wormable remote code execution hole, so it wasn‚Äôt quite a WannaCry virus waiting to break out‚Ä¶
‚Ä¶but it was the first Patch Tuesday bug ever credited to the NSA.
That‚Äôs the US National Security Agency, ironically the very same the organisation that originally came up with the ETERNALBLUE exploit that ended up in the WannaCry virus after somehow escaping from the NSA‚Äôs control.
This time, the NSA gave the bug to Microsoft to patch the hole proactively, and here we are!
The vulnerability, denoted CVE-2020-0601, is a way by which crooks can mint themselves cryptographic certificates with other people‚Äôs names on them.
The simplest way of thinking about this bug is that it‚Äôs like a magic machine that lets you crank out fake IDs that not only look good when you show them to a cop, but also stand up to scrutiny even when the cop runs them through the ID scanner that checks back with headquarters.
Back on Tuesday, when the vulnerability was officially announced, we said:
We don‚Äôt yet know how hard it is to produce rogue certificates that will pass muster, and Microsoft understandably isn‚Äôt offering any instructions on how to do it. 
All we know is that Microsoft has said it can be done, and that‚Äôs why the patch for CVE-2020-0601 has been issued.
So you should assume that someone will find out how to do it pretty soon, and will probably tell the world how to do it, too.
We don‚Äôt know whether to be happy or sad that we were correct.
The first proof-of-concept ‚Äúfake ID generators‚Äù are out ‚Äì we‚Äôve already seen a Python program of 53 lines, and a Ruby script of just 21 ‚Äì and they really are sitting there for anyone to use for free.
What we didn‚Äôt predict, though we probably should have, is exactly what the first widely-publicised ‚Äúlive attack‚Äù would do to prove its point.
(We say ‚Äúlive attack‚Äù ‚Äì but, just to be clear, the researcher who did the work and tweeted about it didn‚Äôt actually attack anyone else‚Äôs server, or tell anyone else how to do so, so we don‚Äôt mean that in a negative or critical sense.)
Rickroll!
UK cybersecurity researcher Saleem Rashid filmed himself browsing with Edge to a rickroll page that not only claims to be Microsoft‚Äôs github.com but also shows up with a nice little checkmark saying ‚Äúvalid certificate‚Äù:
CVE-2020-0601 pic.twitter.com/8tJsJqvnHj
In a later photo in the same Twitter thread, he shows Chrome visiting the rickroll on a a webpage that identifies itself as nsa.gov, with a popup saying ‚ÄúConnection is secure‚Äù and ‚ÄúCertificate (Valid)‚Äù:
thanks to @CiPHPerCoder's hint üôÇthe biggest constraints are Chrome's tight certificate policies and that the root CA must be cached, which you can trigger by visiting a legitimate site that uses the certificate pic.twitter.com/GgftwVvpY8
Rickrolling, in case you‚Äôve never heard of it, is a sort-of humorous tradition beloved amongst techies and internet witticists where you unexpectedly take someone to a video of Rick Astley singing his 1987 hit Never gonna give you up.
Why Rick Astley, and why that song, we simply cannot tell you, but the rickrolling craze started in 2007.
Perhaps its most infamous appearance in the cybersecurity scene was in 2009, when an Australian youngster set loose the world‚Äôs first-ever Apple iPhone virus‚Ä¶
‚Ä¶which let you know you‚Äôd become a victim by changing your phone‚Äôs wallpaper to a photo of the aforementioned Rick Astley.
Rashid‚Äôs tweet is great fun, but with a serious side, because it shows how the CryptoAPI bug could, indeed, be used to lull you into a dangerously false sense of security:
Never gonna git your hub
Never gonna let you down
Never gonna hack your site and fake-cert you.

An important thing to remember about this bug is that exploiting it isn‚Äôt just about what you might see if you browsed to a site with a fake certificate, or how you might be deceived by a program you downloaded in good faith.
The reason you might be deceived by this bug is because the program you were using at that moment was deceived by it, because it used the buggy part of the Windows CryptoAPI. 
(You will also hear this vulnerability called ‚Äúthe crypt32 bug‚Äù because programs that make use of the CryptoAPI generally do so via a file called crypt32.dll.)
In other words, a rogue certificate doesn‚Äôt need to be visible to be deceptive ‚Äì and, ironically, the obvious example of software that does digitial certificate validation behind the scenes for safety‚Äôs sake‚Ä¶
‚Ä¶is auto-updating code that‚Äôs there to fetch security fixes for you automatically in the background so you don‚Äôt have to keep your eye on the process yourself.
As we pointed out in this week‚Äôs Naked Security Live video:
If you patch this hole, then it instantly become useless [against you] to the crooks.
So getting this month‚Äôs patches ‚Äì 2020-01 Cumulative Update for Windows 10 if you‚Äôre patching a laptop rather than a server ‚Äì is your primary defence, which also, as it happens, fixes some 49 other holes.
By the way, those other 49 holes closed in this month‚Äôs Patch Tuesday include several remote code execution vulnerabilities in Microsoft‚Äôs remote access tools.
Those vulnerabilities haven‚Äôt had the media attention that CVE-2020-0601 has received, yet could let attackers log right into your network or your computer without needing a password.
And if crooks can log straight into your network, they reduce the Windows CryptoAPI Spoofing Vulnerability to a minor worry, because they no longer need to trick anyone into running malware with bogus certificates ‚Äì they can just launch the malware for themselves.
So, if the CryptoAPI bug gets you to embrace our advice to ‚Äúpatch early, patch often‚Äù‚Ä¶
‚Ä¶then perhaps we can write it up as a silver lining, not a dark cloud on the horizon.
LEARN MORE ABOUT THE VULNERABILITY AND HOW TO PATCH
